name: Build

on: push

jobs:
  cache:
    name: Cache
    runs-on: ubuntu-latest
    steps:
      - name: Cache permissions
        run: |
          sudo chown $(id -un) /var/cache/apt/archives
      - name: Cache packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives/*.deb
          key: apt-cache-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            apt-cache-
      - name: Download packages
        run: |
          sudo apt update
          sudo apt install -y -d -o Acquire::Retries=50 \
                           mtools syslinux isolinux \
                           pxelinux genisoimage liblzma-dev \
                           libc6-dev-i386 valgrind \
                           gcc-arm-none-eabi gcc-aarch64-linux-gnu

  x86:
    name: x86
    runs-on: ubuntu-latest
    needs: cache
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache permissions
        run: |
          sudo chown $(id -un) /var/cache/apt/archives
      - name: Cache packages
        uses: actions/cache/restore@v4
        with:
          path: /var/cache/apt/archives/*.deb
          key: apt-cache-${{ github.run_id }}-${{ github.run_attempt }}
      - name: Install packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 \
                           mtools syslinux isolinux \
                           pxelinux genisoimage liblzma-dev \
                           libc6-dev-i386 valgrind \
                           libgcc-s1:i386 libc6-dbg:i386
      - name: Prepare the corresponding headers
        run: |
          find ./src/config -type f -name '*.h.x86' -exec sh -c 'mv $0 ${0%.*}' {} \;
      - name: Build (BIOS)
        run: |
          make -j 4 -C src \
               bin/ipxe.pxe \
               bin/ipxe.kpxe \
               bin/ipxe.lkrn \
               bin/ipxe.dsk \
               bin/ipxe.hd \
               bin/ipxe.usb \
               bin/ipxe.iso \
               bin/undionly.pxe
      - name: Build (EFI)
        run: |
          make -j 4 -C src \
               bin-i386-efi/ipxe.efi \
               bin-i386-efi/ipxe.usb \
               bin-i386-efi/ipxe.iso
      - name: Prepare release archives
        run: |
          tar czf \
               x86-bios.tar.gz \
               -C src/bin \
               ipxe.pxe \
               ipxe.kpxe \
               ipxe.lkrn \
               ipxe.dsk \
               ipxe.hd \
               ipxe.usb \
               ipxe.iso \
               undionly.pxe
          tar czf \
               x86-efi.tar.gz \
               -C src/bin-i386-efi \
               ipxe.efi \
               ipxe.usb \
               ipxe.iso
      - name: Make Release Body
        id: x86
        run: |
          echo Built from \#`git rev-parse --short HEAD` > release.md
          echo ::set-output name=tag::x86-`git rev-parse --short HEAD`
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.tar.gz"
          bodyFile: "release.md"
          prerelease: true
          tag: ${{ steps.x86.outputs.tag }}

  arm32:
    name: ARM32
    runs-on: ubuntu-latest
    needs: cache
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache permissions
        run: |
          sudo chown $(id -un) /var/cache/apt/archives
      - name: Cache packages
        uses: actions/cache/restore@v4
        with:
          path: /var/cache/apt/archives/*.deb
          key: apt-cache-${{ github.run_id }}-${{ github.run_attempt }}
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 \
                           mtools syslinux isolinux gcc-arm-none-eabi \
                           pxelinux genisoimage liblzma-dev
      - name: Prepare the corresponding headers
        run: |
          find ./src/config -type f -name '*.h.arm32' -exec sh -c 'mv $0 ${0%.*}' {} \;
      - name: Build
        run: |
          make -j 4 -C src CROSS=arm-none-eabi- \
               bin-arm32-efi/intel.efi \
               bin-arm32-efi/intel.usb \
               bin-arm32-efi/intel.iso

  arm64:
    name: ARM64
    runs-on: ubuntu-latest
    needs: cache
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache permissions
        run: |
          sudo chown $(id -un) /var/cache/apt/archives
      - name: Cache packages
        uses: actions/cache/restore@v4
        with:
          path: /var/cache/apt/archives/*.deb
          key: apt-cache-${{ github.run_id }}-${{ github.run_attempt }}
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 \
                           mtools syslinux isolinux gcc-aarch64-linux-gnu \
                           pxelinux genisoimage liblzma-dev
      - name: Prepare the corresponding headers
        run: |
          find ./src/config -type f -name '*.h.arm64' -exec sh -c 'mv $0 ${0%.*}' {} \;
      - name: Build
        run: |
          make -j 4 -C src CROSS=aarch64-linux-gnu- \
               bin-arm64-efi/ipxe.efi \
               bin-arm64-efi/ipxe.usb \
               bin-arm64-efi/ipxe.iso

